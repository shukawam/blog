<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HiveMQ on Shukawam's Daily Blog</title><link>https://shukawam.github.io/blog/tags/hivemq/</link><description>Recent content in HiveMQ on Shukawam's Daily Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 26 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shukawam.github.io/blog/tags/hivemq/index.xml" rel="self" type="application/rss+xml"/><item><title>HiveMQ 入門</title><link>https://shukawam.github.io/blog/blog/2021/0726-getting-started-hivemq/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0726-getting-started-hivemq/</guid><description>始めに 業務で MQTT を扱う必要が出てきたので、その素振りがてら MQTT Broker の一つである HiveMQ に入門し、ざっくりと以下の環境を作ることをゴールにしてみます。
About HiveMQ HiveMQ は、IoT デバイスとの間で MQTT ベースでメッセージングを可能にするプラットフォームです。標準的な MQTT の機能は完全にサポートされてあり、HA 構成や既存システムへの統合等様々な拡張機能を提供しています。エディションは商用版と OSS 版の 2 種類が存在しますが、今回は OSS 版を用います。また、HiveMQ の実行方法はいくつか選択肢があります。
フルマネージドな HiveMQ Cloud Service を使用する HiveMQ のパッケージをダウンロードして使う Docke 上で実行する AWS 上で実行する(HiveMQ がプリインストールされた AMI を使用する) Azure 上で実行する(Azure Resource Manager を使用して、HiveMQ 環境を作成する) 今回は、最も手軽に試せそうだったので Docker 上で動作させる方法を採用したいと思います。
作業手順 まずは、HiveMQ を起動します。
docker run --rm -d -p 8080:8080 -p 1883:1883 hivemq/hivemq4 これで準備は完了です。超簡単！
次に、作成した MQTT Broker に接続する MQTT Client を実装します。今回は、Helidon で作成したアプリケーションを MQTT Client(Device n) と見立てて進めていきます。つまり、先ほどの図をもう少し詳細に書くと以下のようになります。</description></item></channel></rss>