<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Shukawam's Daily Blog</title><link>https://shukawam.github.io/blog/tags/java/</link><description>Recent content in java on Shukawam's Daily Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 08 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shukawam.github.io/blog/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Oracle FunctionsのCold Start対策</title><link>https://shukawam.github.io/blog/blog/2021/0408-oracle-functions-cold-start/</link><pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0408-oracle-functions-cold-start/</guid><description>始めに OCI の FaaS サービスである Functions の Cold Start の対策をメモしておく。将来的に事前暖機の機能等がリリースされた場合、本記事はアンチパターンとなる可能性があることをご了承の上参照してください。(あくまで、2021/04/08 現在取りえる手法として書きます)
Functions の定期実行 この手のサービスではよくとられてきた手法ですが、Functions に適当なエンドポイントを用意して定期的に実行するというものです。コンテナが落ちるまでの具体的な時間は不明ですが、感覚的に 15 ~ 20 分といった所なので 10 分に一回叩けば問題ないと思います。現在、Functions 自体に定期実行するような機能は存在しないので外部から実行してあげる必要がありますが、具体的に取りえる方法としては以下の通り。(他にもあるかもしれないですが&amp;hellip;)
適当な Compute Instance から CLI や SDK、署名付きの HTTP エンドポイントを定期的に叩く OCI Monitoring の Health Check を使用する 一つずつ簡単に紹介します。
適当な Compute Instance から定期実行する こちらは、特に解説不要かな、、cron でも書いて適当に叩いてください。
OCI Monitoring の Health Check 機能を使用する Health Check のエンドポイントを持つ Functions を作成する fn init --runtime java11 fn-hello 一つの Functions に対して、API Gateway でエンドポイントを複数作成し、そのパスで分岐処理するパターンです。
今回は、
/cold/hello: Hello, world という文字列を返却するエンドポイント /cold/health: 定期実行用の常に{&amp;quot;status&amp;quot;: &amp;quot;UP&amp;quot;}を返却するエンドポイント といった形で作ってみました。</description></item><item><title>Spring Native Getting Started</title><link>https://shukawam.github.io/blog/blog/2021/0322-spring-boot-native-image/</link><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0322-spring-boot-native-image/</guid><description>始めに Spring Nativeを使って、Spring Boot アプリケーションを Native Image 化してみます。
手順 Spring Initializr を使用してひな形を作成します。今回は、Helath Check のエンドポイントを一つ有するアプリケーションを作成します。
curl -G https://start.spring.io/starter.zip -o spring-boot-native-image-sample.zip -d javaVersion=11 -d dependencies=web,actuator,native % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 57164 100 57164 0 0 106k 0 --:--:-- --:--:-- --:--:-- 106k 解凍します。
unzip spring-boot-native-image-sample.zip -d spring-boot-native-image Archive: spring-boot-native-image-sample.zip inflating: spring-boot-native-image/.gitignore inflating: spring-boot-native-image/HELP.md inflating: spring-boot-native-image/mvnw creating: spring-boot-native-image/src/ creating: spring-boot-native-image/src/main/ creating: spring-boot-native-image/src/main/java/ creating: spring-boot-native-image/src/main/java/com/ creating: spring-boot-native-image/src/main/java/com/example/ creating: spring-boot-native-image/src/main/java/com/example/demo/ inflating: spring-boot-native-image/src/main/java/com/example/demo/DemoApplication.</description></item><item><title>Helidon SE Component - Config, OpenAPI</title><link>https://shukawam.github.io/blog/blog/2021/0212-helidon-se-components/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0212-helidon-se-components/</guid><description>始めに Java の軽量フレームワークの一つであるHelidonの全コンポーネントを触っていくエントリーの一回目です。本日は、
Config OpenAPI について触っていこうと思います。
Components Config 様々なソース(.properties, .yaml, .json)から Config オブジェクトに設定プロパティをロードして処理するための Java API を提供します 各種設定情報をソースコードから分離することでコード自体の保守性を向上させたりする目的があります 早速、試していきます。CLI を使用してひな形を生成した場合は、自動的に Config 関連の依存関係が含まれていますが、含まれていない場合は以下をpom.xmlに追加します。
pom.xml
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.helidon.config&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;helidon-config-yaml&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 今回は、yaml形式で記載したいと思います。jsonでもpropertiesでも結果は同じですが個人的にyamlが好きだからです。（一番無駄がないし、視認性もよい）
resources/application.yamlに Config オブジェクトにマッピングさせる情報を記載していきます。
application.yaml
app: greeting: &amp;#34;Hello&amp;#34; config: &amp;#34;config service works!!&amp;#34; # 追記 server: port: 8080 host: 0.0.0.0 application.yamlに記載した項目を参照するには以下のようにします。
var config = Config.create(); var value = config.get(&amp;#34;app.config&amp;#34;).asString().orElse(&amp;#34;config service NOT work&amp;#34;); OpenAPI OpenAPI 仕様のドキュメントを生成するエンドポイントを容易に生成することができる Eclipse MicroProfile の OpenAPI 仕様となっているので、実装などで困った際は Helidon のドキュメントではなく、MicroProfile の OpenAPI 仕様のドキュメントを参考にするとよい 早速、試していきます。まずは、OpenAPI 関連の依存関係をpom.</description></item><item><title>Helidon SE Get Started</title><link>https://shukawam.github.io/blog/blog/2021/0206-helidon-se-get-started/</link><pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0206-helidon-se-get-started/</guid><description>始めに Java の軽量フレームワークの一つである Helidon を何回かに分けて全コンポーネントを触ってみたいと思います。尚、Helidon には
Helidon SE: 軽量でフットプリント重視 Helidon MP: Eclipse MicroProfile との互換性や機能性を重視 と、エディションが二つ存在しますが、一旦は SE の方に注目して触っていきたいと思います。(SE のコンポーネントを一通り試し終わったら、MP も同様に試していきます。) 今回は、アプリケーションの生成までをやっていきます。
環境 一応、私の環境情報を載せておきます。
OS: Windows 10(WSL2 で Ubuntu 18.04 を使用しています) Java: OpenJDK 11 手順 Helidon CLI を使う アプリケーションのひな型生成や開発モード（ソースコードの変更を再度ビルドする必要なく即時反映してくれる仕組み）をサポートしている便利ツールです。2021/02/06 現在、Windows はまだ CLI の配布がされていないため、ローカルで CLI を使用したい場合は、WSL2 で Ubuntu を使うなどのひと工夫が必要です。
インストール自体は、非常に簡単でバイナリをダウンロードしてパスが通っているところにインストールするだけで大丈夫です。
$ curl -O https://helidon.io/cli/latest/linux/helidon $ chmod +x ./helidon $ sudo mv ./helidon /usr/local/bin/ とりあえず、どんなことができるかを見ておきます。
$ helidon --help Usage: helidon [OPTIONS] COMMAND Helidon Project command line tool Options: -D&amp;lt;name&amp;gt;=&amp;lt;value&amp;gt; Define a system property --verbose Produce verbose output --debug Produce debug output --plain Do not use color or styles in output Commands: build Build the application dev Continuous application development info Print project information init Generate a new project version Print version information Run &amp;#39;helidon COMMAND --help&amp;#39; for more information on a command.</description></item></channel></rss>