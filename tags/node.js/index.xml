<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js on Shukawam's Daily Blog</title><link>https://shukawam.github.io/blog/tags/node.js/</link><description>Recent content in Node.js on Shukawam's Daily Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 14 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shukawam.github.io/blog/tags/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Angularでバックエンドサーバにプロキシする</title><link>https://shukawam.github.io/blog/blog/20201014/</link><pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/20201014/</guid><description>始めに ローカル環境でフロントエンド、バックエンドの開発を行うと以下の様な構成で開発することがある。
フロントエンド：http://localhost:4200 バックエンド：http://localhost:8080 オリジンが異なるパターンです。特に設定を加えずにバックエンドの API をコールしようとすると、CORS Policy で通信が拒否されます。
そのため、Angular を用いた開発では webpack dev server のプロキシサポートを使用して、特定の URL パスをバックエンドサーバに転送するという事が良く取られます。今回は、その手順（良く忘れるので自分への備忘録）です。
手順 proxy.conf.jsonをsrc/に以下の内容で新規に作成する。 { &amp;#34;/api&amp;#34;: { &amp;#34;target&amp;#34;: &amp;#34;http://localhost:8080&amp;#34;, &amp;#34;secure&amp;#34;: false } } CLI 設定ファイル（angular.json）の設定を修正する。 &amp;#34;architect&amp;#34;: { &amp;#34;serve&amp;#34;: { &amp;#34;builder&amp;#34;: &amp;#34;@angular-devkit/build-angular:dev-server&amp;#34;, &amp;#34;options&amp;#34;: { &amp;#34;browserTarget&amp;#34;: &amp;#34;your-application-name:build&amp;#34;, &amp;#34;proxyConfig&amp;#34;: &amp;#34;src/proxy.conf.json&amp;#34; }, ng serveで開発サーバを再起動する 参考 バックエンドサーバーへのプロキシ</description></item><item><title>Nest.jsで接続先情報を環境変数から非同期で取得する</title><link>https://shukawam.github.io/blog/blog/20200911/</link><pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/20200911/</guid><description>始めに ※ブログを一か所にまとめるため、以前Qiitaに投稿した記事の移行しています。
Nest.js で環境ごとにデータベースの接続先を分けるために、接続情報を実行環境の環境変数から非同期で取得するサンプルを作成します。
環境 Node.js v12.14.1 Nest.js v6.7.2 TypeORM v0.2.22 PostgreSQL v11.6 実装手順 必要最小限の実装 参考）Nest.js Document &amp;gt; TECHNIQUES &amp;gt;Database
ライブラリインストール TypeORM, Database Driver (PostgreSQL)をインストールする。
$ npm install @nestjs/typeorm typeorm pg DB 接続情報を定義 app.module.tsにデータベースの接続情報を定義する。
import { Module } from &amp;#39;@nestjs/common&amp;#39;; import { TypeOrmModule } from &amp;#39;@nestjs/typeorm&amp;#39;; import { ItemModule } from &amp;#39;./item/item.module&amp;#39;; import { Connection } from &amp;#39;typeorm&amp;#39;; import { join } from &amp;#39;path&amp;#39;; @Module({ imports: [ ItemModule, // DBの接続情報を定義 TypeOrmModule.</description></item></channel></rss>