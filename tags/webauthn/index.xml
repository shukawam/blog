<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebAuthn on Shukawam's Daily Blog</title><link>https://shukawam.github.io/blog/tags/webauthn/</link><description>Recent content in WebAuthn on Shukawam's Daily Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shukawam.github.io/blog/tags/webauthn/index.xml" rel="self" type="application/rss+xml"/><item><title>FIDO2 Tips &amp; Considering</title><link>https://shukawam.github.io/blog/blog/2021/0406-webauthn-tips/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0406-webauthn-tips/</guid><description>始めに FIDO2 をアプリケーションに組み込むときのちょっとした Tips や考慮しないといけないことを思いつくままにまとめてみようと思います。思いつく＆何か新しい発見があるたびに記事は随時更新していきます。
Tips Virtual Authenticators Tab まずは、Chrome の拡張機能の紹介です。組織のポリシーなどで会社支給のパソコンからinternalの認証器が呼び出せないパターンもあるでしょう。例えば、デモやちょっとした検証をやりたいのにわざわざそのために USB セキュリティキーを買うのもちょっと馬鹿らしいですよね。そんな時に非常に役に立ちます。
使い方自体は非常に簡単で、まずは chrome ウェブストア - Virtual Authenticators Tabで当該機能を有効化する。
Virtual Authenticators Tab を追加しますか？ というポップアップが出てくるので、拡張機能を追加 を押して追加する。
確認には、おなじみのwebauthn.ioが良いと思います。
まずは、DevTool を開き追加されているVirtual Authenticators内にあるEnable Virtual Authenticator Environmentのチェックボックスにチェックを入れます。
後は、お好きな仮想認証器を生成してください。一応、設定できるパラメータを解説すると
Protocol ctap2 CTAP1 を FIDO2 用に拡張したもの u2f CTAP1 のことでクライアントと外部認証器との通信プロトコルのこと 選択肢では、internalが選択できそうですが、作成の際にエラーメッセージが出力されます Transport usb USB セキュリティキーのこと(e.g. Yubikey) nfc Near Field Communication(e.g. Suica, Pasmo) ble Bluetooth Smart/Bluetooth Low Energy Technology internal プラットフォームの認証器のこと(e.</description></item><item><title>WebAuthn DeepDive #2 - Attestation</title><link>https://shukawam.github.io/blog/blog/2021/0404-webauthn-deep-dive/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0404-webauthn-deep-dive/</guid><description>始めに WebAuthn について学習したときのメモ。今回は、Attestation についてです。
About Attestation 雑に言うと、FIDO2 のユーザー登録フローにおいて認証器で非対称の鍵ペア(秘密鍵、公開鍵)が生成されるが、その公開鍵がきちんと FIDO2 認証ベンダーの認証器から生成されたものか？どうかを検証する仕組みのこと。認証器は出荷時に FIDO2 認定ベンダーより認証器内のセキュア領域にベンダー固有の秘密鍵を埋め込まれるが、その秘密鍵でユーザー登録時に生成した公開鍵に対して署名を行う。最終的に RP(Relying Party)では、その署名をベンダー固有の公開鍵(ルート証明書)を用いる事で検証し、送信されてきた公開鍵の妥当性を検証することでユーザーの登録可否を決定する。
Deep Dive まずは、原文を読んでみましょう。
Authenticators MUST also provide some form of attestation. The basic requirement is that the authenticator can produce, for each credential public key, an attestation statement verifiable by the WebAuthn Relying Party. Typically, this attestation statement contains a signature by an attestation private key over the attested credential public key and a challenge, as well as a certificate or similar data providing provenance information for the attestation public key, enabling the Relying Party to make a trust decision.</description></item><item><title>WebAuthn DeepDive #1 - navigator.credentials.create()</title><link>https://shukawam.github.io/blog/blog/2021/0324-webauthn-deep-dive/</link><pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0324-webauthn-deep-dive/</guid><description>始めに WebAuthn について学習したときのメモ。今回は、WebAuthnよりも CTAP の話が多めかも。
Deep Dive この辺の仕様を読んでいく。
※図はhttps://developer.mozilla.org/ja/docs/Web/API/Web_Authentication_APIから参照
全体の流れとしては、
navigator.credentials.create()が実行される authenticatorMakeCredential()を実行するためのパラメータを組み立てる 認証器のauthenticatorMakeCredential()が呼び出される authenticatorMakeCredential()を実行した結果がブラウザに返される となっています。WebAuthn が実行され、認証器のauthenticatorMakeCredential()が呼び出される所から順番に見ていきます。
2. navigator.credentials.create()の実行 navigator.credentials.create()が呼び出されると、認証器のauthenticatorMakeCredential()を実行するためのパラメータを組み立てて実行します。その際、authenticatorMakeCredential()実行のために必要なパラメータの仕様は、こちらに公開されています。一部抜粋して読んでいきたいと思います。(ひとまず今回は、Required のものだけ確認していきます)
パラメータ名 型 概要 clientDataHash Byte Array clientData のハッシュ rp PublicKeyCredentialRpEntity Relying Party の情報 user PublicKeyCredentialUserEntity 新しく生成する Credential に紐づくユーザーの情報 pubKeyCredParams CBOR Array 生成する Credential のパラメータ(type: public-keyで固定, alg: 公開鍵の暗号化アルゴリズム) clientDataHash Hash of the ClientData contextual binding specified by host.</description></item></channel></rss>