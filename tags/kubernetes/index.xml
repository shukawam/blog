<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on Shukawam's Daily Blog</title><link>https://shukawam.github.io/blog/tags/kubernetes/</link><description>Recent content in kubernetes on Shukawam's Daily Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 15 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shukawam.github.io/blog/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Chaos Mesh を OKE で試す</title><link>https://shukawam.github.io/blog/blog/2021/1215-chaos-mesh/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/1215-chaos-mesh/</guid><description>始めに Kubernetes 上に構築したシステムにカオスエンジニアリングを導入する際の（おそらく）最有力候補である Chaos Mesh を色々触って試してみます。とりあえず、今回は構築まで。
手順 インストール用のスクリプトが提供されているので、それを使います。
curl -sSL https://mirrors.chaos-mesh.org/v2.1.1/install.sh | bash しばらくすると、chaos-testing という namespace にいくつかリソースが作成されます。
kubectl get pods,service -n chaos-testing こんな感じです。
NAME READY STATUS RESTARTS AGE pod/chaos-controller-manager-87f7677bf-jw27d 1/1 Running 0 11m pod/chaos-controller-manager-87f7677bf-wc4zx 1/1 Running 0 11m pod/chaos-controller-manager-87f7677bf-z4xpm 1/1 Running 0 11m pod/chaos-daemon-8nr8f 1/1 Running 0 11m pod/chaos-daemon-jrl4q 1/1 Running 0 11m pod/chaos-dashboard-85db5f48d8-vzxtf 1/1 Running 0 11m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/chaos-daemon ClusterIP None &amp;lt;none&amp;gt; 31767/TCP,31766/TCP 11m service/chaos-dashboard NodePort 10.</description></item><item><title>HiveMQ を Kubernetes 上に構築する</title><link>https://shukawam.github.io/blog/blog/2021/0806-getting-started-hivemq/</link><pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/2021/0806-getting-started-hivemq/</guid><description>始めに 業務で MQTT を扱う必要性が出てきたので、自分で色々遊べる MQTT Broker を Kubernetes 上に構築します。
About HiveMQ HiveMQ は、IoT デバイスとの間で MQTT ベースでメッセージングを可能にするプラットフォームです。標準的な MQTT の機能は完全にサポートされてあり、HA 構成や既存システムへの統合等様々な拡張機能を提供しています。エディションは商用版と OSS 版の 2 種類が存在しますが、今回は OSS 版を用います。また、HiveMQ の実行方法はいくつか選択肢があります。
フルマネージドな HiveMQ Cloud Service を使用する HiveMQ のパッケージをダウンロードして使う Docke 上で実行する AWS 上で実行する(HiveMQ がプリインストールされた AMI を使用する) Azure 上で実行する(Azure Resource Manager を使用して、HiveMQ 環境を作成する) 今回は、可用性なども考慮して Kubernetes(Oracle Container Engine for Kubernetes)上に HiveMQ のクラスターを構築します。
構築手順 非常に簡単です。まずは、HiveMQ Cluster 用を以下のように書きます。
apiVersion: v1 kind: ReplicationController metadata: name: hivemq-replica spec: replicas: 3 selector: app: hivemq-cluster1 template: metadata: name: hivemq-cluster1 labels: app: hivemq-cluster1 spec: containers: - name: hivemq-pods image: hivemq/hivemq3:dns-latest ports: - containerPort: 8080 protocol: TCP name: web-ui - containerPort: 1883 protocol: TCP name: mqtt env: - name: HIVEMQ_DNS_DISCOVERY_ADDRESS value: &amp;#34;hivemq-discovery.</description></item></channel></rss>