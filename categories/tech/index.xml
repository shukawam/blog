<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on Shukawam's Daily Blog</title><link>https://shukawam.github.io/blog/categories/tech/</link><description>Recent content in tech on Shukawam's Daily Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Wed, 14 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shukawam.github.io/blog/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Angularでバックエンドサーバにプロキシする</title><link>https://shukawam.github.io/blog/blog/20201014/</link><pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/20201014/</guid><description>始めに ローカル環境でフロントエンド、バックエンドの開発を行うと以下の様な構成で開発することがある。
フロントエンド：http://localhost:4200 バックエンド：http://localhost:8080 オリジンが異なるパターンです。特に設定を加えずにバックエンドの API をコールしようとすると、CORS Policy で通信が拒否されます。
そのため、Angular を用いた開発では webpack dev server のプロキシサポートを使用して、特定の URL パスをバックエンドサーバに転送するという事が良く取られます。今回は、その手順（良く忘れるので自分への備忘録）です。
手順 proxy.conf.jsonをsrc/に以下の内容で新規に作成する。 { &amp;#34;/api&amp;#34;: { &amp;#34;target&amp;#34;: &amp;#34;http://localhost:8080&amp;#34;, &amp;#34;secure&amp;#34;: false } } CLI 設定ファイル（angular.json）の設定を修正する。 &amp;#34;architect&amp;#34;: { &amp;#34;serve&amp;#34;: { &amp;#34;builder&amp;#34;: &amp;#34;@angular-devkit/build-angular:dev-server&amp;#34;, &amp;#34;options&amp;#34;: { &amp;#34;browserTarget&amp;#34;: &amp;#34;your-application-name:build&amp;#34;, &amp;#34;proxyConfig&amp;#34;: &amp;#34;src/proxy.conf.json&amp;#34; }, ng serveで開発サーバを再起動する 参考 バックエンドサーバーへのプロキシ</description></item><item><title>Angular9系以上でBootstrap4を使う</title><link>https://shukawam.github.io/blog/blog/20201007/</link><pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/20201007/</guid><description>始めに ※こちらの記事は以前 Qiita で執筆したAngular9 で Bootstrap4 を使うの移行記事です。執筆当時とバージョンなどを微修正しています。
Angular 9 系に Bootstrap4 (ng-bootstrap) を適用する手順です。 通常の Bootstrap（jQuery, popper.js 依存）を使用してもよいですが、余計なライブラリに依存することになる事になるため、おすすめしません。（Angular の思想にも反します。） ng-bootstrap は、Bootstrap が依存している jQuery, popper.js の実装を Angular の component に差し替えています。 メジャーバージョンはしっかりと確認する。 特に Angular5 と Angular6+では CLI の設定ファイル周りが大きく変更となっています。 公式の英語ドキュメント読むのめんどいって方向け。 環境 タイトルにもある通り、今回は Angular10 系に Bootstrap4 系を適用します。
$ ng --version _ _ ____ _ ___ / \ _ __ __ _ _ _| | __ _ _ __ / ___| | |_ _| / △ \ | '_ \ / _` | | | | |/ _` | '__| | | | | | | / ___ \| | | | (_| | |_| | | (_| | | | |___| |___ | | /_/ \_\_| |_|\__, |\__,_|_|\__,_|_| \____|_____|___| |___/ Angular CLI: 10.</description></item><item><title>Spring Boot ApplicationからAutonomous Transaction Processing（ATP）に接続する</title><link>https://shukawam.github.io/blog/blog/20201005/</link><pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/20201005/</guid><description>始めに 環境 手順 ATP を作成する ウォレットをダウンロードする アプリケーションで DB の接続設定をする ひな型作成 Doma2 を依存関係に追加 Eclipse 用の設定を追加 DB の接続設定を追加 起動の確認を行う API の作成 終わりに 参考 始めに Spring Boot アプリケーションから Autonomous Transaction Processing（以下、ATP） に接続する手順を記載します。また、動作確認用に簡単な API も作成したいと思います。OR Mapper として Doma2 を使用していますが、何でも構いません。
環境 Windows 10 Java 15 Spring Boot 2.3.4.RELEASE Doma 2.43.0 Autonomous Transaction Processing 手順 ATP を作成する まずは、接続先の DB がないと話にならないので以下のように入力し ATP を作成します。</description></item><item><title>僕が転職活動をどのように行っていたか</title><link>https://shukawam.github.io/blog/blog/20200915/</link><pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/20200915/</guid><description>始めに 2020 年 4 月頃からいい所があったら転職しようと緩く転職活動をしていましたが、8 月にとある会社さんから内定をいただき転職活動を終了することにしました。若手（新卒 3 年目）かつ、コロナ禍の転職活動ということで同じような境遇の方に参考となれば幸いです。
前提（私のこと） 簡単に自己紹介をします。
SIer で新卒 3 年目 共通技術部門（いわゆる何でも屋さん）に所属 自社 FW の開発、保守 特定プロジェクトへの技術支援 技術スタック 言語 Java Spring etc &amp;hellip; Node.js, TypeScript Nest.js, Angular etc &amp;hellip; Database Oracle, PostgreSQL, MongoDB など一応触れる程度 クラウド関連 AWS 簡単に転職活動を振り返ってみる 活動の頻度 ひと月に 1~2 社（多くても 3 社）くらいしかエントリーしていなかったです。0 社の時とかも普通にありました。母数をもっと打った方が内定をいただく可能性が高くなることも分かっていたのですが、いくつかの理由でこのペースで実施していました。</description></item><item><title>Nest.jsで接続先情報を環境変数から非同期で取得する</title><link>https://shukawam.github.io/blog/blog/20200911/</link><pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/20200911/</guid><description>始めに ※ブログを一か所にまとめるため、以前Qiitaに投稿した記事の移行しています。
Nest.js で環境ごとにデータベースの接続先を分けるために、接続情報を実行環境の環境変数から非同期で取得するサンプルを作成します。
環境 Node.js v12.14.1 Nest.js v6.7.2 TypeORM v0.2.22 PostgreSQL v11.6 実装手順 必要最小限の実装 参考）Nest.js Document &amp;gt; TECHNIQUES &amp;gt;Database
ライブラリインストール TypeORM, Database Driver (PostgreSQL)をインストールする。
$ npm install @nestjs/typeorm typeorm pg DB 接続情報を定義 app.module.tsにデータベースの接続情報を定義する。
import { Module } from &amp;#39;@nestjs/common&amp;#39;; import { TypeOrmModule } from &amp;#39;@nestjs/typeorm&amp;#39;; import { ItemModule } from &amp;#39;./item/item.module&amp;#39;; import { Connection } from &amp;#39;typeorm&amp;#39;; import { join } from &amp;#39;path&amp;#39;; @Module({ imports: [ ItemModule, // DBの接続情報を定義 TypeOrmModule.</description></item><item><title>Hugo + GitHub Pagesでブログを始めた</title><link>https://shukawam.github.io/blog/blog/20200909/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://shukawam.github.io/blog/blog/20200909/</guid><description>始めに つい先日、Qiita からはてなブログに移行したばかりだったのですが、個人的に何点か気に食わない点があったので自分で作って運用してみることにしました。 この記事は実際にブログを作ってみた時のお話です。
このブログについて 環境 静的サイトジェネレーター：Hugo Static Site Generator v0.74.3 運用（ホスティング）：GitHub Pages という環境で、作成し運用されています。
選定理由 いくつか背景があるので、順にお話します。
Qiita, はてなブログじゃダメだった理由 Markdown で記載できるブログあるあるだと思うのですが、とにかく画像のアップロードがめんどくさい。他にも、デザインが気に食わなかったりなど細かい理由はありますが、理由の 9 割はこれでした。自分のメモ、ついでに外部発信くらいと考えてる人にとってはなるべく省エネで執筆したかったのです。
静的サイトジェネレーター このブログは、Golang 謹製のHugoを使用して作成しています。Hugo 以外の有名どころだと、Gatsby, Hexo, Jekyll etc &amp;hellip; 辺りがありますが、正直何でも良かったです。環境構築が非常に楽という噂を聞きつけたので、Hugo を採用しました。（他のものは試してすらないです）実際、私の PC は Windows 10 なのですが、環境構築～このブログを作成するまで 1 時間程度でできました。
ホスティング先 ホスティング先には、いくつか条件がありました。
無料で運用できること インフラ（サーバ）の面倒を見なくてもいいこと これらを加味した結果、ホスティング先は GitHub Pages or GitLab Pages に絞られました。最初は、Hugo によって生成されるコンテンツを管理したくなかったので、GitLab Pages にしようと思っていましたが、個人的に GitLab から GitHub に移行したばかりだったので少し微妙だなと思ったことをツイートしたのですが、こんな回答をいただけました。
docs/ を管理する方法以外に、任意のブランチをデプロイに使う方法があります。参考になれば幸いです。
&amp;gt; Deploy Hugo site to GitHub Pages with GitHub Actionshttps://t.</description></item></channel></rss>